feat: Sistema completo de lixeira, estatísticas e gestão de recibos/contadores

## 🎯 Resumo das Implementações

Esta atualização adiciona funcionalidades críticas para gestão completa do sistema
contábil, incluindo backup automático, estatísticas de armazenamento, emissão de
recibos e gestão de contadores.

## ✨ Novas Funcionalidades

### 1. 🗑️ Sistema de Lixeira e Backup
- Backup automático de dados excluídos (clientes, faturamentos, recibos)
- Restauração de itens da lixeira
- Função "Desfazer" para criações e exclusões
- Gerenciamento completo da lixeira (limpar restaurados/não restaurados/todos)
- Nova tabela: `itens_excluidos`

### 2. 📊 Estatísticas de Armazenamento
- Visualização do tamanho do banco de dados em tempo real
- Visualização do tamanho dos dados na lixeira
- Estatísticas detalhadas:
  - Total de itens na lixeira
  - Itens restaurados vs não restaurados
  - Estatísticas por tipo de entidade
- Cards visuais com gradientes e ícones no dark mode

### 3. 📝 Sistema de Recibos
- Emissão de recibos de honorários
- Conversão de valores por extenso
- Numeração automática sequencial
- Visualização e impressão de recibos
- Histórico de recibos emitidos
- Nova tabela: `recibo`

### 4. 👥 Gestão de Contadores
- CRUD completo de contadores
- Cadastro com CPF, CRC, contato e endereço
- Validação de dados
- Listagem com pesquisa
- Nova tabela: `contador`

### 5. 💰 Valor de Honorários
- Campo `valor_honorarios` no cadastro de clientes
- Uso automático na emissão de recibos
- Migração: `09c7b661ca28`

## 🔧 Melhorias Técnicas

### Backend
- Novo módulo: `backend/app/lixeira.py` - Gerenciamento de backup
- Novos endpoints: `/api/atividades/estatisticas` e `/api/atividades/limpar-lixeira`
- 3 novas migrações do banco de dados
- Script auxiliar: `backend/migrate.bat` para facilitar migrações
- Correção do `alembic.ini` com configurações necessárias

### Frontend
- Nova página: `EmissaoRecibo.jsx` - Emissão de recibos
- Nova página: `GerenciarContador.jsx` - Gestão de contadores
- Componente: `ReciboVisualizacao.jsx` - Preview e impressão
- Utilitário: `numeroExtenso.js` - Conversão numérica
- Melhorias em `HistoricoAtividades.jsx` com estatísticas visuais
- APIs: `reciboApi.js` e `contadorApi.js`

## 🗄️ Banco de Dados Demo

Para proteger dados confidenciais de clientes:
- ✅ Criado `seed_github.json` com dados fictícios
- ✅ Script `seed_github.py` para gerar banco demo
- ✅ 5 clientes fictícios + 2 contadores
- ✅ Dados de exemplo de faturamentos e recibos
- ✅ Banco real protegido pelo `.gitignore`

## 📚 Documentação

- `CHANGELOG_IMPLEMENTACOES.md` - Lista completa de implementações
- `backend/README_BANCO_DEMO.md` - Guia do banco de demonstração
- `docs/FUNCIONALIDADE_ESTATISTICAS_LIXEIRA.md` - Doc técnica detalhada
- `docs/SOLUCAO_PROBLEMA_ALEMBIC.md` - Solução de problemas de migração

## 🔒 Segurança

- ✅ Autenticação obrigatória em todos os endpoints
- ✅ Controle de permissões (admin/user)
- ✅ Validação de dados no frontend e backend
- ✅ Log de auditoria completo
- ✅ Proteção de dados sensíveis
- ✅ Banco real não commitado (protegido pelo .gitignore)

## 📊 Estatísticas

- **Arquivos novos**: 17
- **Arquivos modificados**: 10
- **Linhas adicionadas**: ~3.650
- **Migrações**: 3
- **Novos endpoints**: 15+

## ✅ Testes Realizados

- ✅ Exclusão e restauração de clientes
- ✅ Limpeza da lixeira (todas as opções)
- ✅ Emissão de recibos
- ✅ Cadastro de contadores
- ✅ Estatísticas de armazenamento
- ✅ Migração do banco de dados
- ✅ Geração de banco demo

## 🚀 Como Testar

1. Execute as migrações: `cd backend && migrate.bat upgrade`
2. (Opcional) Gere banco demo: `cd backend && python seed_github.py`
3. Inicie o sistema: `iniciar_sistema.bat`
4. Teste as novas funcionalidades:
   - Histórico de Atividades → Ver estatísticas e testar lixeira
   - Emissão de Recibo → Gerar recibos
   - Gerenciar Contador → CRUD de contadores

## 📝 Breaking Changes

Nenhuma. Todas as funcionalidades são retrocompatíveis.

## 🔄 Migração Necessária

Sim. Execute: `cd backend && migrate.bat upgrade`

---

**Versão**: 2.0.0  
**Data**: Outubro 2025  
**Compatibilidade**: Python 3.8+, Node 18+

