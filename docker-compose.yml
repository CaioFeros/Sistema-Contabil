services:
  db:
    image: postgres:15-alpine
    container_name: sistema_contabil_db
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      # Mapeia a porta 5432 do contêiner para a porta 5433 da sua máquina para evitar conflitos.
      - "5433:5432"

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sistema_contabil_backend
    restart: always
    volumes:
      - ./backend:/app # Mapeia a pasta do backend para o container
    ports:
      - "5000:5000"
    depends_on:
      - db
    environment:
      - FLASK_APP=run.py
      - FLASK_DEBUG=1
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    # Adiciona um comando para esperar o banco de dados ficar pronto antes de iniciar o Flask.
    # Isso evita que o backend falhe ao iniciar se o banco de dados ainda não estiver pronto.
    # Requer que 'wait-for-it.sh' esteja na pasta 'backend'.
    # (Você precisará criar este arquivo)
    command: sh -c "./wait-for-it.sh db:5432 -- flask run --host=0.0.0.0"

  frontend:
    image: node:20-alpine
    container_name: sistema_contabil_frontend
    restart: always
    working_dir: /app
    volumes:
      - ./frontend:/app # Mapeia a pasta do frontend para o container
      - /app/node_modules # Adiciona um volume anônimo para isolar node_modules
    ports:
      - "5173:5173"
    command: sh -c "npm install && npm run dev -- --host"

volumes:
  postgres_data: